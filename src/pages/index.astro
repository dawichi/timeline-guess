---
import Layout from '../layouts/Layout.astro'

const styles = {
    base: 'text-2xl font-bold card p-4 rounded bg-zinc-500 w-24 h-24 flex items-center justify-center',
}
---

<Layout>
    <p>In this game, you need to sort the cards in the board by date. If you miss, you lose.</p>

    <!-- Here the cards will appear, you can sort them freely -->
    <h1 class='my-4 font-bold'>PLAYER'S HAND</h1>
    <section id='hand' class='draggable-box flex gap-4 overflow-x-auto bg-zinc-800 p-8'></section>

    <!-- Here you need to place the cards sorted to gain points -->
    <h1 class='my-4 font-bold'>BOARD</h1>
    <section id='board' class='draggable-box flex gap-4 overflow-x-auto bg-zinc-800 p-8'></section>

    <!-- <button on:click={() => gameData.update(data => ({ ...data, modal: 'game over' }))}>almendra</button> -->
</Layout>

<script is:inline>
    // Copy of ../data/data.ts
    const data = [
        {
            title: 'Appearance of bees',
            year: -130_000_000,
            image: 'bees.png',
        },
        {
            title: 'First cave paintings',
            year: -45_000,
            image: 'cave-paintings.png',
        },
        {
            title: 'Sheep domestication',
            year: -11_000,
            image: 'sheeps.png',
        },
        {
            title: 'Invention of wine',
            year: -6_000,
            image: 'wine.png',
        },
        {
            title: 'Invention of the wheel',
            year: -3_500,
            image: 'wheel.png',
        },
        {
            title: 'The minotaur myth',
            year: -1_600,
            image: 'minotaur.png',
        },
        {
            title: 'Invention of the crossbow',
            year: -400,
            image: 'crossbow.png',
        },
        {
            title: 'Invention of parchment',
            year: -200,
            image: 'parchment.png',
        },
        {
            title: 'Cleopatra crowned queen of egypt',
            year: -51,
            image: 'cleopatra.png',
        },
        {
            title: 'Julius Caesar is named dictator for life',
            year: -47,
            image: 'julius-caesar.png',
        },
        {
            title: 'Destruction of pompeii',
            year: 79,
            image: 'pompeii.png',
        },
        {
            title: 'Inauguration of the coliseum',
            year: 80,
            image: 'coliseum.png',
        },
        {
            title: 'Invention of chess',
            year: 570,
            image: 'chess.png',
        },
        {
            title: 'Invention of the hourglass',
            year: 900,
            image: 'hourglass.png',
        },
        {
            title: 'Invention of the toothbrush',
            year: 1_498,
            image: 'toothbrush.png',
        },
        {
            title: 'Great fire of london',
            year: 1_666,
            image: 'london-fire.png',
        },
        {
            title: 'Invention of the steam engine',
            year: 1_712,
            image: 'steam-engine.png',
        },
        {
            title: 'Invention of shampoo',
            year: 1_814,
            image: 'shampoo.png',
        },
        {
            title: 'Invention of the revolver',
            year: 1_836,
            image: 'revolver.png',
        },
    ]

    /**
     * This object will contain the game state
     *
     * @typedef {{
     *   title: string,
     *   year: number,
     *   image: string,
     * }} Card
     *
     * @type {{
     *   deck: Card[],
     *   board: Card[],
     *   hand: Card[],
     * }}
     */
    const game = {
        deck: JSON.parse(JSON.stringify(data)),
        board: [],
        hand: [],
    }

    // ------------------------------------
    //          1. START THE GAME
    // ------------------------------------
    setTimeout(() => {
        // alert('Drag the cards from your hand to the board, sorting them by date! \n Try to get the highest score possible!')
        const initial_cards_in_hand = 5
        pickCardsFromDeck(initial_cards_in_hand, 'hand')
        renderNewCardsIn('hand', game.hand.slice(-initial_cards_in_hand))
        
        const initial_cards_in_board = 1
        pickCardsFromDeck(initial_cards_in_board, 'board')
        renderNewCardsIn('board', game.board.slice(-initial_cards_in_board))
    }, 200)

    // ------------------------------------
    //                UTILS
    // ------------------------------------
    /**
     * Pick a certain quantity of cards from the deck and insert them in hand or board
     * @param {number} quantity 
     * @param {'hand' | 'board'} placeThemIn
     */
    function pickCardsFromDeck(quantity, placeThemIn) {
        while (quantity > 0) {
            // Pick a random card from the deck
            const index = Math.floor(Math.random() * game.deck.length)
            const card = game.deck.splice(index, 1)[0]

            // Insert it in the hand
            game[placeThemIn].push(card)

            quantity--
        }
    }

    // ------------------------------------
    //         DOM UPDATE FUNCTIONS
    // ------------------------------------
    const HTMLELEMENTS = {
        createCard: (cardData, showYear = false) => {
            const card = document.createElement('div')
            card.className = 'bg-zinc-700 w-48 h-full p-2 rounded shadow card draggable cursor-move flex flex-col items-center justify-center'
            card.draggable = true
            card.innerHTML = `
                <h2 class="font-bold pb-2 w-42 text-wrap h-14 flex items-center text-center">${cardData?.title}</h2>
                <div class="w-32 h-32">
                    <div class="rounded bg-contain bg-no-repeat bg-center h-full w-full overflow-hidden" style="background-image: url(/images/cards/${cardData?.image});">
                    </div>
                </div>
                <p class="text-center font-bold pt-1">${showYear ? cardData?.year : '?'}</p>
            `
            return card
        },
    }

    /**
     * After modifying the game state adding cars to the deck, call this
     * @param {'hand' | 'board'} container
     * @param {Card[]} cards 
     */
    function renderNewCardsIn(container, cards) {
        const box = document.getElementById(container)

        // Push the new cards to the DOM
        const showYear = container === 'board'
        cards.forEach(card => box.appendChild(HTMLELEMENTS.createCard(card, showYear)))

        // Assign the event listeners again
        cleanEventListeners()
        assignEventListeners()
    }

    // Each time we modify the DOM, we need to assign the event listeners again
    function assignEventListeners() {
        // https://www.youtube.com/watch?v=jfYWwQrtzzY
        // The cards that can be dragged (the ones in your hand)
        const draggables = document.querySelectorAll('.draggable')

        // The containers where you can drop the cards (hand and board)
        const containers = document.querySelectorAll('.draggable-box')

        draggables.forEach(draggable => {
            draggable.addEventListener('dragstart', () => {
                draggable.classList.add('dragging')
            })

            draggable.addEventListener('dragend', () => {
                draggable.classList.remove('dragging')

                // After dropping any card
                validateCardsSorting()
            })
        })

        containers.forEach(container => {
            container.addEventListener('dragover', e => {
                // Allow the drop
                e.preventDefault()

                const afterElement = getDragAfterElement(container, e.clientX)
                const draggable = document.querySelector('.dragging')

                if (afterElement) {
                    // Insert the card in a certain position (start or middle)
                    container.insertBefore(draggable, afterElement)
                } else {
                    // Push the card at the end of the container
                    container.appendChild(draggable)
                }
            })
        })
    }

    // Delete all event listeners from the cards and containers
    function cleanEventListeners() {
        const draggables = document.querySelectorAll('.draggable')
        const containers = document.querySelectorAll('.draggable-box')

        draggables.forEach(draggable => {
            const new_element = draggable.cloneNode(true)
            draggable.parentNode.replaceChild(new_element, draggable)
        })

        containers.forEach(container => {
            const new_element = container.cloneNode(true)
            container.parentNode.replaceChild(new_element, container)
        })
    }

    // Allow to place the card between two specific cards inside the container
    function getDragAfterElement(container, x) {
        // Get all draggable elements except the one that is being dragged
        const cards = [...container.querySelectorAll('.card:not(.dragging)')]

        return cards.reduce(
            (closest, nextChild) => {
                const box = nextChild.getBoundingClientRect()
                const offset = x - box.left - box.width / 2

                // If the offset is negative, the card is above the middle of the card
                // If the offset is positive, the card is below the middle of the card
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: nextChild }
                } else {
                    return closest
                }
            },
            { offset: Number.NEGATIVE_INFINITY, element: undefined },
        ).element
    }

    // Check if the cards on the board are sorted correctly
    function validateCardsSorting() {
        const cards = [...document.getElementById('board').querySelectorAll('.card')]

        if (cards.length <= 1) return

        // Get the dates for each card
        cards.forEach(card => {
            if (card.querySelector('p').textContent === '?') {
                const card_data = data.find(c => c.title === card.querySelector('h2').textContent)
                card.querySelector('p').textContent = String(card_data.year)
            }
        })

        cards.map(card => Number(card.querySelector('p').textContent))
        const result = cards.reduce((prev, curr) => {
            if (Number(prev.querySelector('p').textContent) > Number(curr.querySelector('p').textContent)) {
                // The cards are not sorted correctly
                return false
            } else {
                // The cards are sorted correctly, continue
                return curr
            }
        })

        if (result === false) {
            // The cards are not sorted correctly
            alert('You lost!')
            // gameData.update(data => ({ ...data, modal: 'game over' }))
        } else {
            // The cards are sorted correctly
            // 1. Remove the .draggable class from the cards in the board
            const cards = document.getElementById('board').querySelectorAll('.card')
            cards.forEach(card => {
                card.classList.remove('draggable')
                card.classList.remove('cursor-move')
                card.classList.add('border')
                card.draggable = false
            })
        }
    }
</script>
